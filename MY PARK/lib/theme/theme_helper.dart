import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray10001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Yu Gothic UI',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: '?????',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray90002,
          fontSize: 12.fSize,
          fontFamily: 'Yu Gothic UI',
          fontWeight: FontWeight.w300,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 34.fSize,
          fontFamily: 'Yu Gothic UI',
          fontWeight: FontWeight.w300,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black90004,
          fontSize: 32.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black90004,
          fontSize: 26.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black90004,
          fontSize: 24.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.black90004,
          fontSize: 12.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black90004,
          fontSize: 20.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90004,
          fontSize: 16.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90004,
          fontSize: 15.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF32312F),
    primaryContainer: Color(0XFFEEA634),

    // Error colors
    errorContainer: Color(0XFF594A4A),
    onError: Color(0XFF343030),
    onErrorContainer: Color(0XFF070606),

    // On colors(text colors)
    onPrimary: Color(0XBFFFFFFF),
    onPrimaryContainer: Color(0XFF261A07),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF010F07);
  Color get black90001 => Color(0XFF120F0F);
  Color get black90002 => Color(0XFF090909);
  Color get black90003 => Color(0XFF0E0900);
  Color get black90004 => Color(0XFF000000);

  // Blue
  Color get blueA200 => Color(0XFF4285F4);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF8B8989);
  Color get blueGray800 => Color(0XFF3D4653);
  Color get blueGray900 => Color(0XFF2D2C2C);
  Color get blueGray90001 => Color(0XFF292D32);

  // DeepOrange
  Color get deepOrange10000 => Color(0X00FFBFBF);

  // DeepPurple
  Color get deepPurpleA700 => Color(0XFF6700EB);

  // Gray
  Color get gray100 => Color(0XFFF8F7F7);
  Color get gray10001 => Color(0XFFF3F1F1);
  Color get gray10002 => Color(0XFFFBF3F3);
  Color get gray10003 => Color(0XFFF5F5F5);
  Color get gray300 => Color(0XFFDADADA);
  Color get gray400 => Color(0XFFB6B5B5);
  Color get gray40001 => Color(0XFFC6BABA);
  Color get gray40002 => Color(0XFFB7B6B6);
  Color get gray40003 => Color(0XFFAEAEAE);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray50000 => Color(0X009F9999);
  Color get gray5001 => Color(0XFFFDFBFB);
  Color get gray5002 => Color(0XFFEFFDFF);
  Color get gray5003 => Color(0XFFFFFBFB);
  Color get gray5004 => Color(0XFFFFF5F5);
  Color get gray600 => Color(0XFF797F89);
  Color get gray60000 => Color(0X007D7878);
  Color get gray60001 => Color(0XFF7A7474);
  Color get gray60002 => Color(0XFF8A6565);
  Color get gray60003 => Color(0XFF777777);
  Color get gray700 => Color(0XFF517049);
  Color get gray70001 => Color(0XFF616161);
  Color get gray800 => Color(0XFF4D4545);
  Color get gray900 => Color(0XFF0F1018);
  Color get gray90001 => Color(0XFF121111);
  Color get gray90002 => Color(0XFF131313);
  Color get gray90003 => Color(0XFF212121);

  // GrayBf
  Color get gray400Bf => Color(0XBFC1BDBD);

  // Green
  Color get green500 => Color(0XFF2FCB64);

  // Indigo
  Color get indigo50 => Color(0XFFEAEEF9);
  Color get indigoA100 => Color(0XFF7E92F8);
  Color get indigoA200 => Color(0XFF6972F0);

  // Lime
  Color get lime800 => Color(0XFFAA8133);

  // RedAE
  Color get redA700E5 => Color(0XE5E60000);

  // Teal
  Color get tealA700 => Color(0XFF17CE92);

  // White
  Color get whiteA700 => Color(0XFFFFFDFD);

  // Yellow
  Color get yellowA400 => Color(0XFFFFE504);
  Color get yellowA40094 => Color(0X94FAE10F);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
